# GitHub Actions CI/CD workflow for the Rust Python project.
# This workflow automates linting, testing, and publishing of the Python package
# to TestPyPI (for development builds) and PyPI (for releases).
# It leverages Makefile targets for common tasks like setup, lint, test, and build.

name: Rust Python CI/CD

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 'nightly-2024-08-04'
  PYTHON_VERSION: '3.11'

on:
  push:
    branches:
      - feat/**
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Matches tags like v0.1.0
      - '[0-9]+.[0-9]+.[0-9]+'  # Matches tags like 0.1.0
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code (via Makefile) # Updated name for clarity
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy, rustfmt # Keep this, it's good practice

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip' # Enable pip caching

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-lint-

      - name: Install dependencies via Makefile
        run: make setup # make lint depends on this

      - name: Run linters via Makefile
        run: make lint

  test:
    name: Test (via Makefile) # Updated name
    runs-on: ubuntu-22.04
    needs: [] # Assuming it runs in parallel with linA
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          # No specific components like clippy/rustfmt needed here if not directly used by test command itself
          # but make test -> make build -> make setup will run. The setup in Makefile installs rust if not present.

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          # Using a unified cache key for all jobs that build the Rust backend (test, build_publish_dev, build_publish_release)
          # This allows sharing of build artifacts between these jobs if they run on the same runner.
          # The 'lint' job uses a separate cache key as its dependencies/artifacts might differ slightly.
          key: ${{ runner.os }}-cargo-release-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-build-

      - name: Run tests via Makefile
        run: |
          make setup
          make test # This target should handle setup, build, install, and pytest

  build_docker_image:
    name: Build and Push Docker Image
    runs-on: ubuntu-22.04
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      USERNAME: ${{ github.actor }}
      PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.1
        with:
          install: true
          driver-opts: |
            image=moby/buildkit:master

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}

      - name: Check Dockerfile existence
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Error: Dockerfile not found in repository root"
            exit 1
          fi

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}} # e.g., 0.1.0 or v0.1.0
            type=semver,pattern={{major}}.{{minor}} # e.g., 0.1
            type=raw,value=latest # Always tag as latest for releases
          labels: |
            org.opencontainers.image.title=Vietnamese Stock Data Mining
            org.opencontainers.image.description=Mining and analyzing Vietnamese stock data
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ github.ref_name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}-${{ github.job }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ github.job }}
