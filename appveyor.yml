
image:
  - ubuntu2004
  - ubuntu2204

environment:
  CARGO_TERM_COLOR: always
  RUST_VERSION: nightly-2024-08-04
  PYTHON_VERSION: 3.11

# Cache Rust and Python dependencies
cache:
  - /home/appveyor/.cargo/bin
  - /home/appveyor/.cargo/registry/index
  - /home/appveyor/.cargo/registry/cache
  - /home/appveyor/.cargo/git/db
  - /home/appveyor/.cache/pip
  - backend/target
  - target

# Shared installation steps for all builds
init:
  - sh: |
      # Debug: Print environment details
      echo "Running on $APPVEYOR_BUILD_WORKER_IMAGE, branch: $APPVEYOR_REPO_BRANCH, tag: $APPVEYOR_REPO_TAG_NAME"
      # Install Rust
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $RUST_VERSION || exit 1
      source $HOME/.cargo/env
      rustup component add clippy rustfmt || exit 1
  - sh: |
      # Install Python 3.11
      sudo apt-get update -qq
      sudo apt-get install -y software-properties-common
      sudo add-apt-repository -y ppa:deadsnakes/ppa || true
      sudo apt-get update -qq
      sudo apt-get install -y python3.11 python3.11-dev python3-pip || exit 1
      python3.11 -m pip install --upgrade pip || exit 1
  - sh: make setup # Installs maturin, twine, wheel via Makefile

# Trigger builds on pushes to main and tags
for:
  # Development builds for main branch
  - matrix:
      only:
        - branch: main
    build:
      parallel: true
    environment:
      PUBLISH_ENV: dev
      TWINE_USERNAME: __token__
      TWINE_PASSWORD:
        secure: TEST_PYPI_API_TOKEN
    build_script:
      - sh: |
          echo "Running build for main branch"
          BASE_VERSION=$(grep -oP '^version = "\K[^"]+' backend/Cargo.toml)
          echo "Base version from Cargo.toml: $BASE_VERSION"
          COMMIT_COUNT=$(git rev-list --count main)
          DEV_VERSION="${BASE_VERSION}-dev${COMMIT_COUNT}"
          echo "Updating backend/Cargo.toml version to: $DEV_VERSION"
          BASE_VERSION_ESCAPED=$(echo "${BASE_VERSION}" | sed 's/\./\\./g')
          sed -i "s/^version = \"${BASE_VERSION_ESCAPED}\"/version = \"${DEV_VERSION}\"/" backend/Cargo.toml
          echo "New version in Cargo.toml: $(grep '^version = ' backend/Cargo.toml)"
          make library
    test_script:
      - sh: echo "Skipping tests as they are handled in GitHub Actions"
    deploy_script:
      - sh: |
          echo "Deploying to TestPyPI"
          python3.11 -m twine upload --repository-url https://test.pypi.org/legacy/ --verbose dist/*.whl || exit 1
    on_success:
      - sh: echo "Successfully published dev version to TestPyPI"

  # Release builds for tags
  - matrix:
      only:
        - tag: /^[v]?[0-9]+\.[0-9]+\.[0-9]+$/
    build:
      parallel: true
    environment:
      PUBLISH_ENV: release
      TWINE_USERNAME: __token__
      TWINE_PASSWORD:
        secure: PYPI_API_TOKEN
    build_script:
      - sh: |
          echo "Running build for tag $APPVEYOR_REPO_TAG_NAME"
          CARGO_VERSION=$(grep -oP '^version = "\K[^"]+' backend/Cargo.toml)
          TAG_NAME="$APPVEYOR_REPO_TAG_NAME"
          CLEANED_TAG_VERSION=${TAG_NAME#v}
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Tag version: $TAG_NAME"
          echo "Cleaned tag version: $CLEANED_TAG_VERSION"
          if [ "$CARGO_VERSION" != "$CLEANED_TAG_VERSION" ]; then
            echo "Error: Cargo.toml version ($CARGO_VERSION) does not match tag ($CLEANED_TAG_VERSION)"
            exit 1
          fi
          make library
    test_script:
      - sh: echo "Skipping tests as they are handled in GitHub Actions"
    deploy_script:
      - sh: |
          echo "Deploying to PyPI"
          python3.11 -m twine upload --non-interactive --verbose dist/*.whl || exit 1
    on_success:
      - sh: echo "Successfully published release version to PyPI"
